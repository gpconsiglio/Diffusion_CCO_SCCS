######################################## Name_to_ID.R #########################################################
# Replace old data frame with new data frame that adds a column of numbered IDs
nodes <- data.frame(i = 1:length(nodes$author), author = nodes$author,
type = nodes$type, method = nodes$method, year = nodes$year)
# Reseparate nodes (with numbered ID data) into two dataframes for a1 IDs and aO IDs
a1_id <- subset(nodes, type != 'aO', select = c(i, author, type, year))
aO_id <- subset(nodes, type != 'a1', select = c(i, author, type, year))
# Rename columns (this will come in handy when we join the tables)
a1_id <- rename(a1_id, c("i"="a1_id"))
aO_id <- rename(aO_id, c("i"="aO_id"))
# Let's join the tables!
edges <- sqldf("SELECT PubMelt.Author1, a1_id.a1_id, PubMelt.value, PubMelt.year
FROM PubMelt INNER JOIN a1_id
ON PubMelt.Author1 = a1_id.author")
edges <- sqldf("SELECT edges.Author1, edges.a1_id, edges.value, edges.year, aO_id.aO_id
FROM edges INNER JOIN aO_id
ON edges.value = aO_id.author")
# final edges dataframe with only IDs and year
edges <- data.frame(a1 = edges$a1_id, aO = edges$aO_id, year = edges$Year)
# add edges ID to table
edges$id <- 1:length(edges$a1)
View(nodes)
View(PubMeltRaw)
View(PubMeltRaw)
View(RawPubs)
write.cs(PubMelt)
write.csv(PubMelt)
?write.csv()
View(nodes)
quality <- read.csv("qualityData", header=T, sep=",")
quality <- read.csv("qualityData.csv", header=T, sep=",")
View(quality)
quality <- read.csv("qualityData.csv", header=T, sep=",")
View(quality)
View(quality)
quality <- read.csv("qualityData.csv", header=T, sep=",")
View(quality)
View(quality)
?write.csv()
write.csv(quality2013[quality$year < 2013, ], "quality2012trial")
quality2013 <- read.csv("quality2013.csv", header=T, sep=",")
write.csv(quality2013[quality$year < 2013, ], "quality2012trial")
write.csv(quality2013[quality$year < 2013, ], "quality2012trial.csv")
for i in c(1:21) {
write.csv(quality2013[quality$year < (2013-i), ], sprintf("quality%d.csv", (2013-i))
}
for (i in c(1:21)) {
write.csv(quality2013[quality$year < (2013-i), ], sprintf("quality%d.csv", (2013-i))
}
for (i in c(1:21)) {
write.csv(quality2013[quality$year < (2013-i), ], sprintf("quality%d.csv", (2013-i)))
}
?data.frame
?printf()
?sprintf()
install.library(igraph)
install.packages(igraph)
install.packages("statnet")
View(quality2013)
# -------
for (i in c(1:21)) {
T <- quality2013[quality2013$year < (2013-i), ]
print(i)
print(2013-i)
print(T)
message("---------------------------------")
#write.csv(T, sprintf("quality%d.csv", (2013-i)))
}
for (i in c(1:3)) {
T <- quality2013[quality2013$year < (2013-i), ]
print(i)
print(2013-i)
print(T)
message("---------------------------------")
#write.csv(T, sprintf("quality%d.csv", (2013-i)))
}
# Create dataframe for the rest of the years
for (i in c(20:22)) {
temp <- quality2013[quality2013$year < (2013-i), ]
list <- (temp)
print(list)
message("---------------------------------")
#write.csv(T, sprintf("quality%d.csv", (2013-i))) # add back if we need to print tables
}
# Create dataframe for the rest of the years
for (i in c(18:21)) {
temp <- quality2013[quality2013$year < (2013-i), ]
list <- (temp)
print(list)
message("---------------------------------")
#write.csv(T, sprintf("quality%d.csv", (2013-i))) # add back if we need to print tables
}
# Create dataframe for the rest of the years
for (i in c(1:5)) {
temp <- quality2013[quality2013$year < (2013-i), ]
list <- (temp)
print(list)
message("---------------------------------")
#write.csv(T, sprintf("quality%d.csv", (2013-i))) # add back if we need to print tables
}
L <- list()
L[1] <- "hi"
L[3] <- "third"
quality <- list();
for (i in c(1:21)) {
tbl <- quality2013[quality2013$year < (2013-i), ]
list[i] <- tb1
}
print(quality)
quality <- list();
for (i in c(1:21)) {
tbl <- quality2013[quality2013$year < (2013-i), ]
list[i] <- tb1
}
print(quality)
for (i in c(1:21)) {
tbl <- quality2013[quality2013$year < (2013-i), ]
}
list[i] <- tb1
for (i in c(1:21)) {
tbl <- quality2013[quality2013$year < (2013-i), ]
}
quality <- list();
for (i in c(1:21)) {
tbl <- quality2013[quality2013$year < (2013-i), ]
quality[i] <- tb1
}
quality <- list();
for (i in c(1:21)) {
tbl <- quality2013[quality2013$year < (2013-i), ]
}
quality[i] <- tb1
quality <- list();
for (i in c(1:21)) {
tbl <- quality2013[quality2013$year < (2013-i), ]
quality[i] <- tbl
}
warning()
print(quality)
quality <- list();
for (i in c(1:21)) {
tbl <- data.frame(quality2013[quality2013$year < (2013-i), ])
quality[i] <- tbl
}
warnings()
print(quality)
# Make new .csv tables - only needed once.
for (i in c(1:21)) {
temp <- quality2013[quality2013$year < (2013-i), ]
write.csv(temp, sprintf("quality%d.csv", (2013-i)))
}
?write.csv
rm(list=ls())
library(sqldf)
library(igraph)
library(reshape2)
library(plyr)
######################################### melt_cast.R #############################################################
# Reads csv as data frame. Contains publications with authors, year, and method
RawPubs <- read.csv("AllPubRaw.csv", header=T, sep=",")
# Generates preliminary edgelist from first author to other authors, with year and method data
PubMeltRaw <- melt(RawPubs, id.vars = c("Author1", "Year", "Method"))
# Many papers do not have 36 authors. Remove rows with no author data
# Fill blank spaces with NA, then use na.omit
PubMeltRaw[PubMeltRaw == ""] <- NA
PubMelt <- na.omit(PubMeltRaw)
######################################### concatenate.R ###########################################################
# Divide data into two tables: first authors (a1) and 'other' authors (aO)----------------------------------------
nodes_a1_raw <- sqldf("SELECT Author1 AS author, 'a1' AS type, Method AS method, Year AS year FROM PubMelt")
nodes_aO_raw <- sqldf("SELECT value AS author, 'aO' AS type, Method AS method, Year AS year FROM PubMelt")
# Authors who published in both methods are now either CCO,SSCO or SSCO,CCO
nodes_a1_cm <- sqldf("SELECT author, type, GROUP_CONCAT(DISTINCT method) AS method, year AS Year
FROM nodes_a1_raw
GROUP BY author")
nodes_aO_cm <- sqldf("SELECT author, type, GROUP_CONCAT(DISTINCT method) AS method, year AS Year
FROM nodes_aO_raw
GROUP BY author")
# Create nodes list
nodesall <- sqldf("SELECT author, type, method, year FROM nodes_a1_cm
UNION SELECT author, type, method, year FROM nodes_aO_cm")
# concatenate authors who've published as both a1 & aO
nodes <- sqldf("SELECT author, GROUP_CONCAT(type,'') AS type, method, min(year) AS year
FROM nodesall
GROUP BY author")
# Remove nodes beyond their initial entry (ie. first publication)
nodes <- sqldf("SELECT author, type, method, min(year) AS year FROM nodes GROUP BY author")
# In the final table of nodes, all authors are listed with the year of their first publication in
# the field, along with method(s) and type(s) of author position
######################################## Name_to_ID.R #########################################################
# Replace old data frame with new data frame that adds a column of numbered IDs
nodes <- data.frame(i = 1:length(nodes$author), author = nodes$author,
type = nodes$type, method = nodes$method, year = nodes$year)
# Reseparate nodes (with numbered ID data) into two dataframes for a1 IDs and aO IDs
a1_id <- subset(nodes, type != 'aO', select = c(i, author, type, year))
aO_id <- subset(nodes, type != 'a1', select = c(i, author, type, year))
# Rename columns (this will come in handy when we join the tables)
a1_id <- rename(a1_id, c("i"="a1_id"))
aO_id <- rename(aO_id, c("i"="aO_id"))
# Let's join the tables!
edges <- sqldf("SELECT PubMelt.Author1, a1_id.a1_id, PubMelt.value, PubMelt.year
FROM PubMelt INNER JOIN a1_id
ON PubMelt.Author1 = a1_id.author")
edges <- sqldf("SELECT edges.Author1, edges.a1_id, edges.value, edges.year, aO_id.aO_id
FROM edges INNER JOIN aO_id
ON edges.value = aO_id.author")
# final edges dataframe with only IDs and year
edges <- data.frame(a1 = edges$a1_id, aO = edges$aO_id, year = edges$Year)
# add edges ID to table
edges$id <- 1:length(edges$a1)
################################### 2016-07-11 ADDING GIULIA'S QUALITY DATA ##########################################
################################################# NEW SCRIPT #########################################################
# Read .csv table into R
quality2013 <- read.csv("quality2013.csv", header=T, sep=",")
# Make new .csv tables - only needed once.
for (i in c(1:21)) {
temp <- quality2013[quality2013$year <= (2013-i), ]
write.csv(temp, sprintf("quality%d.csv", (2013-i)))
}
library(sqldf)
library(igraph)
library(reshape2)
library(plyr)
######################################### melt_cast.R #############################################################
# Reads csv as data frame. Contains publications with authors, year, and method
RawPubs <- read.csv("AllPubRaw.csv", header=T, sep=",")
# Generates preliminary edgelist from first author to other authors, with year and method data
PubMeltRaw <- melt(RawPubs, id.vars = c("Author1", "Year", "Method"))
# Many papers do not have 36 authors. Remove rows with no author data
# Fill blank spaces with NA, then use na.omit
PubMeltRaw[PubMeltRaw == ""] <- NA
PubMelt <- na.omit(PubMeltRaw)
######################################### concatenate.R ###########################################################
# Divide data into two tables: first authors (a1) and 'other' authors (aO)----------------------------------------
nodes_a1_raw <- sqldf("SELECT Author1 AS author, 'a1' AS type, Method AS method, Year AS year FROM PubMelt")
nodes_aO_raw <- sqldf("SELECT value AS author, 'aO' AS type, Method AS method, Year AS year FROM PubMelt")
# Authors who published in both methods are now either CCO,SSCO or SSCO,CCO
nodes_a1_cm <- sqldf("SELECT author, type, GROUP_CONCAT(DISTINCT method) AS method, year AS Year
FROM nodes_a1_raw
GROUP BY author")
nodes_aO_cm <- sqldf("SELECT author, type, GROUP_CONCAT(DISTINCT method) AS method, year AS Year
FROM nodes_aO_raw
GROUP BY author")
# Create nodes list
nodesall <- sqldf("SELECT author, type, method, year FROM nodes_a1_cm
UNION SELECT author, type, method, year FROM nodes_aO_cm")
# concatenate authors who've published as both a1 & aO
nodes <- sqldf("SELECT author, GROUP_CONCAT(type,'') AS type, method, min(year) AS year
FROM nodesall
GROUP BY author")
# Remove nodes beyond their initial entry (ie. first publication)
nodes <- sqldf("SELECT author, type, method, min(year) AS year FROM nodes GROUP BY author")
# In the final table of nodes, all authors are listed with the year of their first publication in
# the field, along with method(s) and type(s) of author position
######################################## Name_to_ID.R #########################################################
# Replace old data frame with new data frame that adds a column of numbered IDs
nodes <- data.frame(i = 1:length(nodes$author), author = nodes$author,
type = nodes$type, method = nodes$method, year = nodes$year)
# Reseparate nodes (with numbered ID data) into two dataframes for a1 IDs and aO IDs
a1_id <- subset(nodes, type != 'aO', select = c(i, author, type, year))
aO_id <- subset(nodes, type != 'a1', select = c(i, author, type, year))
# Rename columns (this will come in handy when we join the tables)
a1_id <- rename(a1_id, c("i"="a1_id"))
aO_id <- rename(aO_id, c("i"="aO_id"))
# Let's join the tables!
edges <- sqldf("SELECT PubMelt.Author1, a1_id.a1_id, PubMelt.value, PubMelt.year
FROM PubMelt INNER JOIN a1_id
ON PubMelt.Author1 = a1_id.author")
edges <- sqldf("SELECT edges.Author1, edges.a1_id, edges.value, edges.year, aO_id.aO_id
FROM edges INNER JOIN aO_id
ON edges.value = aO_id.author")
# final edges dataframe with only IDs and year
edges <- data.frame(a1 = edges$a1_id, aO = edges$aO_id, year = edges$Year)
# add edges ID to table
edges$id <- 1:length(edges$a1)
################################### 2016-07-11 ADDING GIULIA'S QUALITY DATA ##########################################
################################################# NEW SCRIPT #########################################################
# Read .csv table into R
quality2013 <- read.csv("quality2013.csv", header=T, sep=",")
# Make new .csv tables - only needed once.
for (i in c(1:21)) {
temp <- quality2013[quality2013$year <= (2013-i), ]
write.csv(temp, sprintf("quality%d.csv", (2013-i)))
}
library(sqldf)
library(igraph)
library(reshape2)
library(plyr)
######################################### melt_cast.R #############################################################
# Reads csv as data frame. Contains publications with authors, year, and method
RawPubs <- read.csv("AllPubRaw.csv", header=T, sep=",")
# Generates preliminary edgelist from first author to other authors, with year and method data
PubMeltRaw <- melt(RawPubs, id.vars = c("Author1", "Year", "Method"))
# Many papers do not have 36 authors. Remove rows with no author data
# Fill blank spaces with NA, then use na.omit
PubMeltRaw[PubMeltRaw == ""] <- NA
PubMelt <- na.omit(PubMeltRaw)
######################################### concatenate.R ###########################################################
# Divide data into two tables: first authors (a1) and 'other' authors (aO)----------------------------------------
nodes_a1_raw <- sqldf("SELECT Author1 AS author, 'a1' AS type, Method AS method, Year AS year FROM PubMelt")
nodes_aO_raw <- sqldf("SELECT value AS author, 'aO' AS type, Method AS method, Year AS year FROM PubMelt")
# Authors who published in both methods are now either CCO,SSCO or SSCO,CCO
nodes_a1_cm <- sqldf("SELECT author, type, GROUP_CONCAT(DISTINCT method) AS method, year AS Year
FROM nodes_a1_raw
GROUP BY author")
nodes_aO_cm <- sqldf("SELECT author, type, GROUP_CONCAT(DISTINCT method) AS method, year AS Year
FROM nodes_aO_raw
GROUP BY author")
# Create nodes list
nodesall <- sqldf("SELECT author, type, method, year FROM nodes_a1_cm
UNION SELECT author, type, method, year FROM nodes_aO_cm")
# concatenate authors who've published as both a1 & aO
nodes <- sqldf("SELECT author, GROUP_CONCAT(type,'') AS type, method, min(year) AS year
FROM nodesall
GROUP BY author")
# Remove nodes beyond their initial entry (ie. first publication)
nodes <- sqldf("SELECT author, type, method, min(year) AS year FROM nodes GROUP BY author")
# In the final table of nodes, all authors are listed with the year of their first publication in
# the field, along with method(s) and type(s) of author position
######################################## Name_to_ID.R #########################################################
# Replace old data frame with new data frame that adds a column of numbered IDs
nodes <- data.frame(i = 1:length(nodes$author), author = nodes$author,
type = nodes$type, method = nodes$method, year = nodes$year)
# Reseparate nodes (with numbered ID data) into two dataframes for a1 IDs and aO IDs
a1_id <- subset(nodes, type != 'aO', select = c(i, author, type, year))
aO_id <- subset(nodes, type != 'a1', select = c(i, author, type, year))
# Rename columns (this will come in handy when we join the tables)
a1_id <- rename(a1_id, c("i"="a1_id"))
aO_id <- rename(aO_id, c("i"="aO_id"))
# Let's join the tables!
edges <- sqldf("SELECT PubMelt.Author1, a1_id.a1_id, PubMelt.value, PubMelt.year
FROM PubMelt INNER JOIN a1_id
ON PubMelt.Author1 = a1_id.author")
edges <- sqldf("SELECT edges.Author1, edges.a1_id, edges.value, edges.year, aO_id.aO_id
FROM edges INNER JOIN aO_id
ON edges.value = aO_id.author")
# final edges dataframe with only IDs and year
edges <- data.frame(a1 = edges$a1_id, aO = edges$aO_id, year = edges$Year)
# add edges ID to table
edges$id <- 1:length(edges$a1)
################################### 2016-07-11 ADDING GIULIA'S QUALITY DATA ##########################################
################################################# NEW SCRIPT #########################################################
# Read .csv table into R
quality2013 <- read.csv("quality2013.csv", header=T, sep=",")
# Make new .csv tables - only needed once.
for (i in c(1:21)) {
temp <- quality2013[quality2013$year <= (2013-i), ]
write.csv(temp, sprintf("quality%d.csv", (2013-i)))
}
quality2012 = read.csv("quality2012")
list <- list();
# initialize values
for (i in c(1:21)) {
dfs <- data.frame(quality2013[quality2013$year <= (2013-i), ])
list[i] <- dfs
}
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ])
list[i] <- dfs
}
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
list[i] <- dfs
}
warnings()
list <- list();
# initialize values
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
list <- dfs
}
list
# initialize values
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
list[(2013-i)] <- dfs
}
# Read csv files back as dataframes:
quality2012 = read.csv("quality2012")
quality2011 = read.csv("quality2011")
quality2010 = read.csv("quality2010")
quality2009 = read.csv("quality2009")
quality2008 = read.csv("quality2008")
quality2007 = read.csv("quality2007")
quality2006 = read.csv("quality2006")
quality2005 = read.csv("quality2005")
quality2004 = read.csv("quality2004")
quality2003 = read.csv("quality2003")
quality2002 = read.csv("quality2002")
quality2001 = read.csv("quality2001")
quality2000 = read.csv("quality2000")
quality1999 = read.csv("quality1999")
quality1998 = read.csv("quality1998")
quality1997 = read.csv("quality1997")
quality1996 = read.csv("quality1996")
quality1995 = read.csv("quality1995")
quality1994 = read.csv("quality1994")
quality1993 = read.csv("quality1993")
quality1992 = read.csv("quality1992")
# Read csv files back as dataframes:
quality2012 = read.csv("quality2012.csv")
quality2011 = read.csv("quality2011.csv")
quality2010 = read.csv("quality2010.csv")
quality2009 = read.csv("quality2009.csv")
quality2008 = read.csv("quality2008.csv")
quality2007 = read.csv("quality2007.csv")
quality2006 = read.csv("quality2006.csv")
quality2005 = read.csv("quality2005.csv")
quality2004 = read.csv("quality2004.csv")
quality2003 = read.csv("quality2003.csv")
quality2002 = read.csv("quality2002.csv")
quality2001 = read.csv("quality2001.csv")
quality2000 = read.csv("quality2000.csv")
quality1999 = read.csv("quality1999.csv")
quality1998 = read.csv("quality1998.csv")
quality1997 = read.csv("quality1997.csv")
quality1996 = read.csv("quality1996.csv")
quality1995 = read.csv("quality1995.csv")
quality1994 = read.csv("quality1994.csv")
quality1993 = read.csv("quality1993.csv")
quality1992 = read.csv("quality1992.csv")
View(quality2013)
View(quality2012)
node2013 <- sqldf("SELECT author, GROUP_CONCAT(method,',') AS method, avg(reportScore), avg(methodsScore),
FROM quality2013
GROUP BY author")
node2013 <- sqldf("SELECT author, GROUP_CONCAT(method,',') AS method, avg(reportScore), avg(methodsScore)
FROM quality2013
GROUP BY author")
View(node2013)
# concatenate
node2013 <- sqldf("SELECT author, GROUP_CONCAT(DISTINCT method) AS method, avg(reportScore), avg(methodsScore)
FROM quality2013
GROUP BY author")
View(node2013)
View(quality2013)
node2013 <- sqldf("SELECT author, GROUP_CONCAT(DISTINCT method) AS method,
avg(reportScore) AS reportScore, avg(methodsScore) AS methods Score
FROM quality2013
GROUP BY author")
# concatenate
node2013 <- sqldf("SELECT author, GROUP_CONCAT(DISTINCT method) AS method,
avg(reportScore) AS reportScore, avg(methodsScore) AS methodsScore
FROM quality2013
GROUP BY author")
node2013 <- node2013[-1, ]
View(node2013)
if (node2013$reportScore > 80) {
node2013$reportGrade <- a
} else {
node2013$reportGrade <- trial
}
if (node2013$reportScore > 80) {
node2013$reportGrade <- "a"
} else {
node2013$reportGrade <- "trial"
}
if (node2013[ , reportScore]) > 80) {
node2013$reportGrade <- "a"
} else {
node2013$reportGrade <- NA
}
if (node2013[ , reportScore] > 80) {
node2013$reportGrade <- "a"
} else {
node2013$reportGrade <- NA
}
if (node2013[ , node2013$reportScore] > 80) {
node2013$reportGrade <- "a"
} else {
node2013$reportGrade <- NA
}
?ifelse
node2013$reportGrade <- ifelse(node2013$reportScore >= 80, 'a', NA)
if (node2013$reportScore >= 80) {
node2013$reportGrade <- "a"
} else {
node2013$reportGrade <- 'trial'
}
node2013$reportGrade <- ifelse((node2013$reportScore < 80) | (node2013$reportScore >=60) , 'b', NA)
node2013$reportGrade <- ifelse( ((node2013$reportScore < 80) | (node2013$reportScore >=60)) , 'b', NA)
node2013$reportGrade <- ifelse(node2013$reportScore >= 80, 'a', NA)
node2013$reportGrade <- ifelse( ((node2013$reportScore < 80) | (node2013$reportScore >=60)) , 'b', NA)
node2013$reportGrade <- ifelse(node2013$reportScore >= 80, 'a', NA)
node2013$reportGrade <- ifelse( (node2013$reportScore < 80) & (node2013$reportScore >=60) , 'b', NA)
node2013$reportGrade <- ifelse(node2013$reportScore >= 80, 'a', NA)
node2013$reportGrade <- ifelse( ((node2013$reportScore < 80) & (node2013$reportScore >=60)) , 'b', NA)
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
list[(2013-i)] <- dfs
}
print(list[10])
list <- list();
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
list[(2013-i)] <- dfs
}
print(list[10])
list <- list();
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
list[i] <- dfs
}
print(list[10])
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
quality[ (2013-i)] <- dfs
}
quality <- list();
for (i in c(1:21)) {
dfs <- quality2013[quality2013$year <= (2013-i), ]
quality[ (2013-i)] <- dfs
}
